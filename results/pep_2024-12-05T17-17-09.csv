number,name,status
PEP,– PEP Purpose and Guidelines,Active
PEP,– PEP Infrastructure Process,Active
PEP,– Backwards Compatibility Policy,Active
PEP,– Python Packaging Authority (PyPA) Governance,Active
PEP,– Sample reStructuredText PEP Template,Active
PEP,– Python Documentation Translations,Active
PEP,– Python Language Governance,Active
PEP,– Annual Release Cycle for Python,Active
PEP,– Typing governance process,Active
PEP,– Voting Guidelines,Active
PEP,– Style Guide for Python Code,Active
PEP,– CPython platform support,Active
PEP,– Procedure for Adding New Modules,Active
PEP,– Deprecation of Standard Modules,Active
PEP,– Style Guide for C Code,Active
PEP,– BList: A Faster List-like Type,Rejected
PEP,– Migrating to Python 3 as the default online documentation,Final
PEP,– The Commons Governance Model,Rejected
PEP,– Organization of the Python community,Rejected
PEP,– The Community Governance Model,Rejected
PEP,– Python Governance Model Lead by Trio of Pythonistas,Rejected
PEP,– The External Council Governance Model,Rejected
PEP,– Asynchronous IO support,Superseded
PEP,– Cofunctions,Rejected
PEP,– Asynchronous I/O For subprocess.Popen,Withdrawn
PEP,– The Technical Leader Governance Model,Rejected
PEP,– Add a “while” clause to generator expressions,Rejected
PEP,– Cleaning out sys and the “interpreter” module,Rejected
PEP,– Introducing Roles,Rejected
PEP,– Remove Implicit String Concatenation,Rejected
PEP,– Remove Backslash Continuation,Rejected
PEP,– Access to Current Module/Class/Function,Rejected
PEP,– Merging Unladen Swallow into CPython,Withdrawn
PEP,– Delineation of the main module,Rejected
PEP,– Postfix type declarations,Rejected
PEP,– A Switch/Case Statement,Rejected
PEP,"– str(container) should call str(item), not repr(item)",Rejected
PEP,– Procedure for reviewing and improving standard library modules,Withdrawn
PEP,– No More Bare Excepts,Withdrawn
PEP,– Add PyUnicode_Export() and PyUnicode_Import() C functions,Withdrawn
PEP,– IEEE 754 Floating Point Special Values,Rejected
PEP,– Module,Rejected
PEP,– Stricter Type Guards,Withdrawn
PEP,– Dependency specification for single-file scripts,Rejected
PEP,– Callable Modules,Rejected
PEP,– Require virtual environments by default for package installers,Withdrawn
PEP,– A simplified signature for __exit__ and __aexit__,Rejected
PEP,– Adding a “converter” parameter to dataclasses.field,Rejected
PEP,– Lazy Imports,Rejected
PEP,– Labeled break and continue,Rejected
PEP,– A file format to list Python dependencies for reproducibility of an application,Rejected
PEP,"– Standardizing Enum str(), repr(), and format() behaviors",Rejected
PEP,– Robust Stack Overflow Handling,Rejected
PEP,– Reject Foolish Indentation,Rejected
PEP,– Specifying Installer Requirements for Python Projects,Withdrawn
PEP,– Editable installs via virtual wheels,Rejected
PEP,– Allow writing optional types as,Withdrawn
PEP,– Explicit Pattern Syntax for Structural Pattern Matching,Rejected
PEP,– Extensible customizations of the interpreter at startup,Rejected
PEP,– Unused variable syntax,Rejected
PEP,– Using an underscore in the version portion of Python 3.10 compatibility tags,Rejected
PEP,– Support for indexing with keyword arguments,Rejected
PEP,– Dependency specification in pyproject.toml based on PEP 508,Superseded
PEP,– Dependency specification in pyproject.toml using an exploded TOML table,Rejected
PEP,– Callable Type Syntax,Rejected
PEP,– Coordinated Python release,Rejected
PEP,– The one million limit,Withdrawn
PEP,– Hide implementation details from the C API,Withdrawn
PEP,– Structural Pattern Matching,Superseded
PEP,– Python Compatibility Version,Rejected
PEP,– Forbid return/break/continue breaking out of finally,Rejected
PEP,– The manylinux2014 Platform Tag,Superseded
PEP,– A rolling feature release stream for CPython,Rejected
PEP,– Introducing incremental feature releases,Withdrawn
PEP,– Improving bugs.python.org,Withdrawn
PEP,– Python local packages directory,Rejected
PEP,– A Concurrency Memory Model for Python,Withdrawn
PEP,– The C call protocol,Rejected
PEP,– Rationalize Built-in function classes,Withdrawn
PEP,– Unifying function/method classes,Withdrawn
PEP,– Augmented Assignment Expressions,Withdrawn
PEP,– Built-in noop(),Rejected
PEP,– The manylinux2010 Platform Tag,Superseded
PEP,– Defined semantics for locals(),Withdrawn
PEP,– Context-local variables (contextvars),Withdrawn
PEP,– Security transparency in the Python runtime,Withdrawn
PEP,– Instance Descriptors,Rejected
PEP,– Multiple Interpreters in the Stdlib,Superseded
PEP,– Execution Context,Withdrawn
PEP,– More Flexible Loop Control,Rejected
PEP,– Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,Rejected
PEP,– A Unified TLS API for Python,Withdrawn
PEP,– Dot Notation Assignment In Function Header,Rejected
PEP,– Final Grammar for Literal String Interpolation,Withdrawn
PEP,– Allow BlockingIOError in security sensitive APIs,Rejected
PEP,– Managing global context via ‘with’ blocks in generators and coroutines,Withdrawn
PEP,– A Platform Tag for Portable Linux Built Distributions,Superseded
PEP,– Build system abstraction for pip/conda etc,Rejected
PEP,– Existence checking operators,Withdrawn
PEP,– API for code transformers,Rejected
PEP,– Specialize functions with guards,Rejected
PEP,– Add a private version to dict,Superseded
PEP,– Migrate CPython to Git and GitLab,Rejected
PEP,– Using the System RNG by default,Withdrawn
PEP,– A protocol for delegating datetime methods to their tzinfo implementations,Rejected
PEP,– String Interpolation - Extended Discussion,Rejected
PEP,– A standard mechanism for backward compatibility,Rejected
PEP,– Environment Markers,Rejected
PEP,– Chain exceptions at C level,Rejected
PEP,– General purpose template literal strings,Withdrawn
PEP,"– Migrate CPython to Git, Github, and Phabricator",Withdrawn
PEP,– Creating forge.python.org,Withdrawn
PEP,– Core development workflow automation for CPython,Withdrawn
PEP,– Adding structured data to built-in exceptions,Rejected
PEP,– Support for indexing with keyword arguments,Rejected
PEP,– Migration of dict iteration code to Python 3,Withdrawn
PEP,– Exception-catching expressions,Rejected
PEP,– Add binary interpolation and formatting,Withdrawn
PEP,– Standard Metadata Extensions for Python Software Packages,Withdrawn
PEP,– Inclusion of implicit pip bootstrap in Python installation,Rejected
PEP,– Restructuring the CPython startup sequence,Withdrawn
PEP,"– A DSL for specifying signatures, annotations and argument converters",Rejected
PEP,– Adding a key-transforming dictionary to collections,Rejected
PEP,– Easier suppression of file descriptor inheritance,Superseded
PEP,– Time zone support improvements,Superseded
PEP,– Add a frozendict builtin type,Rejected
PEP,– Metadata for Python Software Packages 2.0,Withdrawn
PEP,– Standard library __preview__ package,Rejected
PEP,– Provisional packages in the Python standard library,Superseded
PEP,– Faster evolution of the Python Standard Library,Withdrawn
PEP,– Use decimal.Decimal type for timestamps,Rejected
PEP,– Improved Encapsulation of Import State,Withdrawn
PEP,– Simplified Package Layout and Partitioning,Rejected
PEP,– BDFL Retirement,April Fool!
PEP,– Simpler customisation of class creation,Withdrawn
PEP,– Module Version Numbers,Withdrawn
PEP,– Static metadata for Distutils,Rejected
PEP,– Qualified Names for Modules,Withdrawn
PEP,– Changing the version comparison module in Distutils,Superseded
PEP,– Mirroring infrastructure for PyPI,Withdrawn
PEP,– Adding an Assignment Expression,Withdrawn
PEP,– Namespace Packages,Rejected
PEP,– Allow __enter__() methods to skip the statement body,Rejected
PEP,– Post import hooks,Withdrawn
PEP,– Adding the pkg_resources module,Rejected
PEP,– New Super,Superseded
PEP,– Transitioning to the Py3K Standard Library,Withdrawn
PEP,– Syntax For Dynamic Attribute Access,Rejected
PEP,– The “make” Statement,Withdrawn
PEP,– Path - Object oriented filesystem paths,Rejected
PEP,– Enumerations in Python,Superseded
PEP,– The freeze protocol,Rejected
PEP,– Allow str() to return unicode strings,Rejected
PEP,– Codetags,Rejected
PEP,– Exception Reorganization for Python 3.0,Rejected
PEP,– User Defined (”,Withdrawn
PEP,– Metadata for Python Software Packages 1.2,Superseded
PEP,– Exception Chaining and Embedded Tracebacks,Superseded
PEP,– Design of the CPython Compiler,Withdrawn
PEP,– Make None Callable,Rejected
PEP,– Anonymous Block Statements,Rejected
PEP,– Overloadable Boolean Operators,Rejected
PEP,– Simple Coroutines via SuspendIteration,Withdrawn
PEP,– Byte vectors and String/Unicode Unification,Rejected
PEP,– Python Bytecode Verification,Rejected
PEP,– Treating Builtins as Constants in the Standard Library,Rejected
PEP,– Resource-Release Support for Generators,Rejected
PEP,– A Case for Top and Bottom Values,Rejected
PEP,– Date/Time Parsing and Formatting,Withdrawn
PEP,– Eliminate Implicit Exception Instantiation,Rejected
PEP,– Python Synchronize/Asynchronize Block,Rejected
PEP,– Enhanced While Loop,Rejected
PEP,– Metadata for Python Software Packages 1.1,Superseded
PEP,– Adding Roman Numeral Literals to Python,Rejected
PEP,– How to Change Python’s Grammar,Withdrawn
PEP,– Controlling Generation of Bytecode Files,Withdrawn
PEP,– Reliable Acquisition/Release Pairs,Rejected
PEP,– Special __main__() function in modules,Rejected
PEP,– Extend divmod() for Multiple Divisors,Rejected
PEP,– The Locked Buffer Interface,Withdrawn
PEP,– Support for System Upgrades,Rejected
PEP,– Interpretation of multiline string constants,Rejected
PEP,– Type Names in the types Module,Rejected
PEP,– Backward Compatibility for the Python 2 Standard Library,Superseded
PEP,– Generators Attributes and Exceptions,Withdrawn
PEP,– Integer for-loops,Rejected
PEP,– Loop Counter Iteration with range and xrange,Rejected
PEP,– Adding a bytes Object Type,Withdrawn
PEP,– Switching on Multiple Values,Rejected
PEP,– uniq method for list objects,Rejected
PEP,– Extended HTTP functionality and WebDAV,Rejected
PEP,– A Database of Installed Python Packages,Rejected
PEP,– Omit printing newline after newline,Rejected
PEP,– Simple Iterator for ints,Rejected
PEP,– Sorting Dictionaries by Value,Rejected
PEP,– Optimizing Global Variable/Attribute Access,Withdrawn
PEP,– Prefixing sys.path by command line option,Rejected
PEP,– The,Rejected
PEP,– Making Classes Look More Like Types,Rejected
PEP,– Numeric Kinds,Withdrawn
PEP,– Object Adaptation,Rejected
PEP,– Python Interface Syntax,Rejected
PEP,– Docutils Design Specification,Rejected
PEP,– Metadata for Python Software Packages,Superseded
PEP,– Module Repository Upload Mechanism,Withdrawn
PEP,– Adding a Rational Literal to Python,Rejected
PEP,– __findattr__(),Rejected
PEP,– Reworking Python’s Numeric Model,Withdrawn
PEP,– Adding a Rational Type to Python,Rejected
PEP,– Elementwise/Objectwise Operators,Rejected
PEP,"– Coroutines, Generators, Continuations",Rejected
PEP,– Docstring Format,Withdrawn
PEP,– Docstring Processing System Framework,Rejected
PEP,– Attribute Docstrings,Rejected
PEP,– String Interpolation,Superseded
PEP,– Loop Counter Iteration,Rejected
PEP,– Decoupling the Interpreter Loop,Rejected
PEP,– Adding A New Outer Product Operator,Rejected
PEP,– Python Advanced Library,Withdrawn
PEP,– Range Literals,Rejected
PEP,– Collecting information about git,Withdrawn
PEP,– Multi-dimensional Arrays,Withdrawn
PEP,– Feature Requests,Withdrawn
PEP,– Doing Python Micro Releases,Superseded
PEP,– Sample Plaintext PEP Template,Withdrawn
PEP,– Guidelines for Handling Bug Reports,Withdrawn
PEP,– Standard daemon process library,Deferred
PEP,"– Overloading, Generic Functions, Interfaces, and Adaptation",Deferred
PEP,– Multiple Interpreters in the Stdlib,Deferred
PEP,– Disallow using macros as l-values,Deferred
PEP,– Statement local namespaces (aka “given” clause),Deferred
PEP,– Generator-sensitivity for Context Variables,Deferred
PEP,– Threaded garbage collection,Deferred
PEP,– Running extension modules using the -m option,Deferred
PEP,– Improved Errors for Missing Standard Library Modules,Deferred
PEP,– Rich comparison chaining,Deferred
PEP,– Deterministic cleanup for iterators,Deferred
PEP,–,Deferred
PEP,– None-aware operators,Deferred
PEP,– A circuit breaking protocol and binary operators,Deferred
PEP,– Protecting cleanup statements from interruptions,Deferred
PEP,– The Wheel Binary Package Format 1.9,Deferred
PEP,– Add __getdescriptor__ method to metaclass,Deferred
PEP,– New release cycle and introducing long-term support versions,Deferred
PEP,– Naming conventions and recipes related to packaging,Deferred
PEP,– General purpose decorator clause (aka “@in” clause),Deferred
PEP,– Deprecate codecs.StreamReader and codecs.StreamWriter,Deferred
PEP,– Python Web3 Interface,Deferred
PEP,– Standard image protocol and class,Deferred
PEP,– Logging Usage in the Standard Library,Deferred
PEP,– Simple Implicit Lambda,Deferred
PEP,– Enhanced Argument Tuples,Deferred
PEP,– Programming by Contract for Python,Deferred
PEP,– Optimizing access to globals,Deferred
PEP,– Copyable Iterators,Deferred
PEP,– Pgen Module for Python,Deferred
PEP,– Optimized Access to Module Namespaces,Deferred
PEP,– Attribute Access Handlers,Deferred
PEP,– Stackless Python,Deferred
PEP,– Python Online Help,Deferred
PEP,– Web Library Enhancements,Deferred
PEP,– Python Governance Voting Process,Final
PEP,– Miscellaneous Python 3.0 Plans,Final
PEP,– Procedure for Backwards-Incompatible Changes,Final
PEP,– Things that will Not Change in Python 3000,Final
PEP,– Python Language Moratorium,Final
PEP,– Python 3000,Final
PEP,– Python 3.8 Release Schedule,Final
PEP,– Python 3.7 Release Schedule,Final
PEP,– Package Index Name Retention,Final
PEP,– Using GitHub Issues for CPython,Final
PEP,– Python 3.5 Release Schedule,Final
PEP,– Python 3.6 Release Schedule,Final
PEP,– Removing External Hosting Support on PyPI,Final
PEP,– Removal of the PyPI Mirror Authenticity API,Final
PEP,– Removal of the PyPI Mirror Auto Discovery and Naming Scheme,Final
PEP,– Python 3.4 Release Schedule,Final
PEP,– Migrating from hg.python.org to GitHub,Final
PEP,– Transitioning to release-file hosting on PyPI,Superseded
PEP,– Python 2.8 Un-release Schedule,Final
PEP,– Python 3.3 Release Schedule,Final
PEP,– Python 3.2 Release Schedule,Final
PEP,– Migrating from Subversion to Mercurial,Final
PEP,– Python 3.1 Release Schedule,Final
PEP,– Choosing a distributed VCS for the Python project,Final
PEP,– Python 2.6 and 3.0 Release Schedule,Final
PEP,– Python 2.7 Release Schedule,Final
PEP,– Externally Maintained Packages,Final
PEP,– Python 2.5 Release Schedule,Final
PEP,– Python 2.4 Release Schedule,Final
PEP,– Migrating the Python CVS to Subversion,Final
PEP,– Python 2.2 Release Schedule,Final
PEP,– Python 2.1 Release Schedule,Final
PEP,– Python 2.3 Release Schedule,Final
PEP,– Python 2.0 Release Schedule,Final
PEP,– Python 1.6 Release Schedule,Final
PEP,– Bug Fix Releases,Superseded
PEP,– Guidelines for Language Evolution,Superseded
PEP,– Qualified name for classes and functions,Final
PEP,– Pickle protocol version 4,Final
PEP,– Reworking the OS and IO exception hierarchy,Final
PEP,– ABI version tagged .so files,Final
PEP,– Asynchronous IO Support Rebooted: the “asyncio” Module,Final
PEP,– futures - execute computations asynchronously,Final
PEP,– PYC Repository Directories,Final
PEP,– IP Address Manipulation Library for the Python Standard Library,Final
PEP,– String representation in Python 3000,Final
PEP,– A Type Hierarchy for Numbers,Final
PEP,– Extended Iterable Unpacking,Final
PEP,– Class Decorators,Final
PEP,– Exception Chaining and Embedded Tracebacks,Final
PEP,– Supporting Non-ASCII Identifiers,Final
PEP,– Immutable Bytes and Mutable Buffer,Final
PEP,– Making PyObject_HEAD conform to standard C,Final
PEP,– New Super,Final
PEP,– Integer Literal Support and Syntax,Final
PEP,– Extension Module Initialization and Finalization,Final
PEP,– Using UTF-8 as the default source encoding,Final
PEP,– Renaming iterator.next() to iterator.__next__(),Final
PEP,– New I/O,Final
PEP,– Revising the buffer protocol,Final
PEP,– Removal of Tuple Parameter Unpacking,Final
PEP,– Metaclasses in Python 3000,Final
PEP,– Introducing Abstract Base Classes,Final
PEP,– Bytes literals in Python 3000,Final
PEP,– Simple input built-in in Python 3000,Final
PEP,– Catching Exceptions in Python 3000,Final
PEP,– Raising Exceptions in Python 3000,Final
PEP,– Standard Library Reorganization,Final
PEP,– Make print a function,Final
PEP,– Function Annotations,Final
PEP,"– Revamping dict.keys(), .values() and .items()",Final
PEP,– Access to Names in Outer Scopes,Final
PEP,– Keyword-Only Arguments,Final
PEP,– Index support for digital attestations,Final
PEP,– Python Configuration C API,Final
PEP,– Advanced String Formatting,Final
PEP,– Narrowing types with TypeIs,Final
PEP,– Adding Android as a supported platform,Final
PEP,– C API to format a type fully qualified name,Final
PEP,– Adding iOS as a supported platform,Final
PEP,– Using tarfile.data_filter for source distribution extraction,Final
PEP,– Disabling bdist_egg distribution uploads on PyPI,Final
PEP,– Inlined comprehensions,Final
PEP,– Inline script metadata,Final
PEP,– Filter for tarfile.extractall,Final
PEP,– TypedDict: Read-only items,Final
PEP,– Marking deprecations using the type system,Final
PEP,– Additional Fields for the Simple API for Package Indexes,Final
PEP,– Limited C API for Extending Opaque Types,Final
PEP,– Type Parameter Syntax,Final
PEP,– Override Decorator for Static Typing,Final
PEP,– Type Defaults for Type Parameters,Final
PEP,– Unstable C API tier,Final
PEP,– Using TypedDict for more precise **kwargs typing,Final
PEP,– Making the buffer protocol accessible in Python,Final
PEP,"– Immortal Objects, Using a Fixed Refcount",Final
PEP,– A Per-Interpreter GIL,Final
PEP,– Format Specifier for Signed Zero,Final
PEP,– Data Class Transforms,Final
PEP,– tomllib: Support for Parsing TOML in the Standard Library,Final
PEP,– Enriching Exceptions with Notes,Final
PEP,– Self Type,Final
PEP,– Arbitrary Literal String Type,Final
PEP,– Convert macros to functions in the Python C API,Final
PEP,– Low Impact Monitoring for CPython,Final
PEP,– Consistent views of namespaces,Final
PEP,– Editable installs for pyproject.toml based builds (wheel based),Final
PEP,– Include Fine Grained Error Locations in Tracebacks,Final
PEP,– Platform Tag for Linux Distributions Using Musl,Final
PEP,– Marking individual TypedDict items as required or potentially-missing,Final
PEP,– Variadic Generics,Final
PEP,– Maintaining the Stable ABI,Final
PEP,– User-Defined Type Guards,Final
PEP,– Exception Groups and except*,Final
PEP,– Require OpenSSL 1.1.1 or newer,Final
PEP,– Metadata for Package Source Distributions,Final
PEP,– Structural Pattern Matching: Specification,Final
PEP,– Deprecate distutils module,Final
PEP,– Remove wstr from Unicode,Final
PEP,– Versioning PyPI’s Simple API,Final
PEP,– Precise line numbers for debugging and other tools.,Final
PEP,– Remove Py_UNICODE encoder APIs,Final
PEP,– Recording installed projects,Final
PEP,– Add,Final
PEP,– Add Optional Length-Checking To zip,Final
PEP,– New PEG parser for CPython,Final
PEP,– Storing project metadata in pyproject.toml,Final
PEP,– Relaxing Grammar Restrictions On Decorators,Final
PEP,– Support for the IANA Time Zone Database in the Standard Library,Final
PEP,– String methods to remove prefixes and suffixes,Final
PEP,– Explicit Type Aliases,Final
PEP,– Parameter Specification Variables,Final
PEP,– Allow writing union types as,Final
PEP,– Recording the Direct URL Origin of installed distributions,Final
PEP,– Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,Final
PEP,– Add optional EncodingWarning,Final
PEP,– Removing dead batteries from the standard library,Final
PEP,– Adding “Yank” Support to the Simple API,Final
PEP,– Flexible function and variable annotations,Final
PEP,– Adding a final qualifier to typing,Final
PEP,– Type Hinting Generics In Standard Collections,Final
PEP,– TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,Final
PEP,– Literal Types,Final
PEP,– Add Union Operators To dict,Final
PEP,– Python Initialization Configuration,Final
PEP,– Python Runtime Audit Hooks,Final
PEP,– Pickle protocol 5 with out-of-band data,Final
PEP,– Module State Access from C Extension Methods,Final
PEP,– Assignment Expressions,Final
PEP,– Python Positional-Only Parameters,Final
PEP,– Context Variables,Final
PEP,– Metadata for Python Software Packages 2.1,Final
PEP,– Show DeprecationWarning in __main__,Final
PEP,– Add new time functions with nanosecond resolution,Final
PEP,– Module __getattr__ and __dir__,Final
PEP,– Distributing and Packaging Type Information,Final
PEP,– Data Classes,Final
PEP,– Core support for typing module and generic types,Final
PEP,– Deterministic pycs,Final
PEP,– Built-in breakpoint(),Final
PEP,– Add a new UTF-8 Mode,Final
PEP,– Protocols: Structural subtyping (static duck typing),Final
PEP,– A New C-API for Thread-Local Storage in CPython,Final
PEP,– Coercing the legacy C locale to a UTF-8 based locale,Final
PEP,– Asynchronous Comprehensions,Final
PEP,– Change Windows filesystem encoding to UTF-8,Final
PEP,– Syntax for Variable Annotations,Final
PEP,– Change Windows console encoding to UTF-8,Final
PEP,– Removing Un(der)used file types/extensions on PyPI,Final
PEP,– Asynchronous Generators,Final
PEP,– Make os.urandom() blocking on Linux,Final
PEP,– Adding a frame evaluation API to CPython,Final
PEP,– Preserving Class Attribute Definition Order,Final
PEP,– Underscores in Numeric Literals,Final
PEP,– Specifying Minimum Build System Requirements for Python Projects,Final
PEP,– Adding a file system path protocol,Final
PEP,– A build-system independent format for source trees,Final
PEP,– Simple Repository API,Final
PEP,– Dependency specification for Python Software Packages,Final
PEP,– Adding A Secrets Module To The Standard Library,Final
PEP,– Literal String Interpolation,Final
PEP,– Make the Python Launcher aware of virtual environments,Final
PEP,– HTTPS verification migration tools for Python 2.7,Final
PEP,– Local Time Disambiguation,Final
PEP,– Elimination of PYO files,Final
PEP,– Coroutines with async and await syntax,Final
PEP,– Multi-phase extension module initialization,Final
PEP,– Simpler customisation of class creation,Final
PEP,– A Function for testing approximate equality,Final
PEP,– Change StopIteration handling inside generators,Final
PEP,– Enabling certificate verification by default for stdlib http clients,Final
PEP,– os.scandir() function – a better and faster directory iterator,Final
PEP,– Retry system calls failing with EINTR,Final
PEP,– Type Hints,Final
PEP,– Preserving the order of **kwargs in a function.,Final
PEP,– Backport ensurepip (PEP 453) to Python 2.7,Final
PEP,– Network Security Enhancements for Python 2.7.x,Final
PEP,– Adding % formatting to bytes and bytearray,Final
PEP,– A dedicated infix operator for matrix multiplication,Final
PEP,– Secure and interchangeable hash algorithm,Final
PEP,– Add a new tracemalloc module to trace Python memory allocations,Final
PEP,– Adding A Statistics Module To The Standard Library,Final
PEP,– Explicit bootstrapping of pip in Python installations,Final
PEP,– Additional Unpacking Generalizations,Final
PEP,– A ModuleSpec Type for the Import System,Final
PEP,– Make newly created file descriptors non-inheritable,Final
PEP,– Add new APIs to customize Python memory allocators,Final
PEP,– Single-dispatch generic functions,Final
PEP,– Improving Python ZIP Application Support,Final
PEP,– Safe object finalization,Final
PEP,– The Argument Clinic DSL,Final
PEP,– Adding an Enum type to the Python standard library,Final
PEP,– Version Identification and Dependency Specification,Final
PEP,– The Wheel Binary Package Format 1.0,Final
PEP,– The pathlib module – object-oriented filesystem paths,Final
PEP,– Compatibility Tags for Built Distributions,Final
PEP,– A method for exposing a length hint,Final
PEP,– Adding sys.implementation,Final
PEP,– Implicit Namespace Packages,Final
PEP,– Including mock in the Standard Library,Final
PEP,"– Add monotonic time, performance counter, and process time functions",Final
PEP,– Implement context suppression with exception attributes,Final
PEP,– Python launcher for Windows,Final
PEP,– Explicit Unicode Literal for Python 3.3,Final
PEP,– Key-Sharing Dictionary,Final
PEP,– Suppressing exception context,Final
PEP,– Python Virtual Environments,Final
PEP,– Flexible String Representation,Final
PEP,– argparse - New Command Line Parsing Module,Final
PEP,– Dictionary-Based Configuration For Logging,Final
PEP,– Non-decodable Bytes in System Character Interfaces,Final
PEP,– Syntax for Delegating to a Subgenerator,Final
PEP,– Format Specifier for Thousands Separator,Final
PEP,– Defining a Stable ABI,Final
PEP,– Database of Installed Python Distributions,Final
PEP,– Adding an ordered dictionary to collections,Final
PEP,– Per user site-packages directory,Final
PEP,– Addition of the multiprocessing package to the standard library,Final
PEP,– Main module explicit relative imports,Final
PEP,– The “bytes” Object,Final
PEP,– Function Signature Object,Final
PEP,– Required Superclass for Exceptions,Final
PEP,– Using ssize_t as the index type,Final
PEP,– Allowing Any Object to be Used for Slicing,Final
PEP,– Unifying try-except and try-finally,Final
PEP,– Coroutines via Enhanced Generators,Final
PEP,– The “with” Statement,Final
PEP,– Locale-Independent Float/String Conversions,Final
PEP,– Executing modules as scripts,Final
PEP,– Imports: Multi-Line and Absolute/Relative,Final
PEP,– Decimal Data Type,Final
PEP,– subprocess - New process module,Final
PEP,– Reverse Iteration,Final
PEP,– Partial Function Application,Final
PEP,– Simplified Global Interpreter Lock Acquisition for Extensions,Final
PEP,– Conditional Expressions,Final
PEP,– Decorators for Functions and Methods,Final
PEP,– Extensions to the pickle protocol,Final
PEP,– CSV File API,Final
PEP,– Package Index and Metadata for Distutils,Final
PEP,– New Import Hooks,Final
PEP,– Generator Expressions,Final
PEP,– Codec Error Handling Callbacks,Final
PEP,– Adding a bool type,Final
PEP,– Simpler String Substitutions,Final
PEP,– A Logging System,Final
PEP,– Defining Python Source Code Encodings,Final
PEP,– The enumerate() built-in function,Final
PEP,– Universal Newline Support,Final
PEP,– Unicode file name support for Windows NT,Final
PEP,– Dict Comprehensions,Final
PEP,– Future statements in simulated shells,Final
PEP,– Import Modules from Zip Archives,Final
PEP,– Support for “wide” Unicode characters,Final
PEP,– Simplify xrange(),Final
PEP,– Changing the Division Operator,Final
PEP,– Simple Generators,Final
PEP,– Making Types Look More Like Classes,Final
PEP,– Subtyping Built-in Types,Final
PEP,– Unifying Long Integers and Integers,Final
PEP,– Back to the __future__,Final
PEP,– Using site-packages on Windows,Final
PEP,– Import on Case-Insensitive Platforms,Final
PEP,– Iterators,Final
PEP,– Function Attributes,Final
PEP,– Using Distutils to Build Python,Final
PEP,– Warning Framework,Final
PEP,– Statically Nested Scopes,Final
PEP,– Adding a Built-In Set Object Type,Final
PEP,– Import As,Final
PEP,– Display Hook for Interactive Use,Final
PEP,– Extended Print Statement,Final
PEP,– Reworking the Coercion Model,Final
PEP,– Rich Comparisons,Final
PEP,– Weak References,Final
PEP,– Change the Meaning of,Final
PEP,– Augmented Assignments,Final
PEP,– List Comprehensions,Final
PEP,– Lockstep Iteration,Final
PEP,– Calendar versioning for Python,Draft
PEP,– Python Unicode Integration,Final
PEP,– Preventing task-cancellation bugs by limiting yield in async generators,Draft
PEP,– How to Re-invent the Wheel,Draft
PEP,– Annotating Read-Only Attributes,Draft
PEP,– Explicit Priority Choices Among Multiple Indexes,Draft
PEP,– Disallow return/break/continue that exit a finally block,Draft
PEP,– Limiting deletions on PyPI,Draft
PEP,– External Wheel Hosting,Draft
PEP,– C API to import-export Python integers,Draft
PEP,– Implicit namespace policy for PyPI,Draft
PEP,– Allow,Draft
PEP,– Implicit namespaces for package repositories,Draft
PEP,– A file format to record Python dependencies for installation reproducibility,Draft
PEP,– Implementing PEP 649,Draft
PEP,– Annotating Type Forms,Draft
PEP,– Template Strings,Draft
PEP,– Type checking Annotated metadata,Draft
PEP,– JIT Compilation,Draft
PEP,– Add Py_COMPAT_API_VERSION to the Python C API,Draft
PEP,– Shorthand syntax for keyword arguments at invocation,Draft
PEP,– Static description file for build details of Python installations,Draft
PEP,– Documentation in Annotated Metadata,Draft
PEP,– TypedDict with Typed Extra Items,Draft
PEP,– Subscriptable functions,Draft
PEP,– Cross-compiling Python packages,Draft
PEP,– Specifying external dependencies in pyproject.toml,Draft
PEP,– Recording the provenance of installed packages,Draft
PEP,– PyBI: a standard format for distributing Python Binaries,Draft
PEP,– Upload 2.0 API for Python Package Repositories,Draft
PEP,– Allow parentheses in assert statements,Draft
PEP,– Syntax for late-bound function argument defaults,Draft
PEP,– Sentinel Values,Draft
PEP,– Syntactic Macros,Draft
PEP,– Precise Semantics for Pattern Matching,Draft
PEP,– Adding a frozenmap type to collections,Draft
PEP,– Minor API improvements for binary sequences,Draft
PEP,– Surviving a Compromise of PyPI: End-to-end signing of packages,Draft
PEP,– Uniform project URLs in core metadata,Accepted
PEP,– Rename dist-info-metadata in the Simple API,Accepted
PEP,– Dependency Groups in pyproject.toml,Accepted
PEP,– Syntactic formalization of f-strings,Accepted
PEP,– Remove private dict version field added in PEP 509,Accepted
PEP,– Isolating modules in the standard library,Accepted
PEP,– Make UTF-8 mode default,Accepted
PEP,– Making the Global Interpreter Lock Optional in CPython,Accepted
PEP,– JSON-based Simple API for Python Package Indexes,Accepted
PEP,– Comparison of extra names for optional distribution dependencies,Accepted
PEP,– Marking Python base environments as “externally managed”,Accepted
PEP,– Serve Distribution Metadata in the Simple Repository API,Accepted
PEP,– Postponed Evaluation of Annotations,Accepted
PEP,– Filename of a Source Distribution,Accepted
PEP,– Deferred Evaluation Of Annotations Using Descriptors,Accepted
PEP,– Vectorcall: a fast calling protocol for CPython,Accepted
PEP,– Extending the Repository API to Mitigate Dependency Confusion Attacks,Provisional
PEP,– Secure PyPI downloads with signed repository metadata,Accepted
PEP,– 2025 Term Steering Council election,Active
PEP,– Improving License Clarity with Better Package Metadata,Provisional
PEP,– 2021 Term Steering Council election,Final
PEP,– 2022 Term Steering Council election,Final
PEP,– 2023 Term Steering Council election,Final
PEP,– 2020 Term Steering Council election,Final
PEP,– January 2019 Steering Council election,Final
PEP,– The Steering Council Model,Accepted
PEP,– 2024 Term Steering Council election,Final
PEP,– Open Source Governance Survey,Final
PEP,– Python Language Governance Proposal Overview,Final
PEP,– Python 3.14 Release Schedule,Active
PEP,– Reserved,Active
PEP,– Python 3.13 Release Schedule,Active
PEP,– Python Web Server Gateway Interface v1.0.1,Final
PEP,– REPL-acing the default REPL,Final
PEP,– Python 3.12 Release Schedule,Active
PEP,– An Evaluation of Python’s Public C API,Final
PEP,– Unicode-related Security Considerations for Python,Active
PEP,– Python 3.11 Release Schedule,Active
PEP,– Specializing Adaptive Interpreter,Final
PEP,– Structural Pattern Matching: Tutorial,Final
PEP,– Isolating Extension Modules,Final
PEP,– Structural Pattern Matching: Motivation and Rationale,Final
PEP,– Python 3.9 Release Schedule,Active
PEP,– Python 3.10 Release Schedule,Active
PEP,– Reducing CPython’s Feature Delivery Latency,Final
PEP,– GitHub Issues Migration Plan,Final
PEP,– Notation For Positional-Only Parameters,Final
PEP,– Refactoring C functions and methods,Final
PEP,– Python registration in the Windows registry,Active
PEP,– Literature Overview for Type Hints,Final
PEP,– The Theory of Type Hints,Final
PEP,– IDLE Enhancement Exception for All Branches,Active
PEP,– API for Cryptographic Hash Functions v2.0,Final
PEP,– Pure Python/C Accelerator Module Compatibility Requirements,Final
PEP,– The “python” Command on Unix-Like Systems,Active
PEP,– Docstring Conventions,Active
PEP,– Code Migration and Modernization,Active
PEP,– Python Database API Specification v2.0,Final
PEP,– API for Block Encryption Algorithms v1.0,Final
PEP,– reStructuredText Docstring Format,Active
PEP,– Python Web Server Gateway Interface v1.0,Final
PEP,– API for Cryptographic Hash Functions,Final
PEP,– Python Database API Specification v1.0,Final
PEP,– Doing Python Releases 101,Active
PEP,– The Zen of Python,Active
PEP,– The Python Documentation Editorial Board,Active
PEP,– C API Working Group Charter,Active
PEP,– Deprecating PGP signatures for CPython artifacts,Active
